{"version":3,"file":"vendors-node_modules_reown_appkit-controllers_dist_esm_src_controllers_SwapController_js-node-1d4441.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAyD;AACK;AACZ;AAC0B;AACV;AACZ;AACkD;AAC9C;AACE;AACN;AACgB;AACJ;AACP;AACJ;AACgB;AAChB;AACU;AACF;AACN;AACA;AACF;AACvD;AACO;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kEAAa;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qDAAK;AACnB;AACA;AACA;AACA;AACA,eAAe,yDAAG;AAClB,KAAK;AACL;AACA,eAAe,kEAAM;AACrB,KAAK;AACL;AACA,4BAA4B,gEAAe;AAC3C,0BAA0B,gEAAe;AACzC,wBAAwB,oEAAc;AACtC,+BAA+B,2FAA4B;AAC3D,4BAA4B,wEAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,4DAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,+DAAmB;AAChE;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc,4DAAU;AACxB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iDAAiD,mBAAmB;AACpE,iDAAiD,uBAAuB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gEAAe;AAC/B,gBAAgB,mEAAgB;AAChC;AACA;AACA;AACA,KAAK;AACL;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,6BAA6B,+DAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,gBAAgB,kEAAa;AAC7B;AACA;AACA;AACA,SAAS,IAAI;AACb,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,+BAA+B,iFAAuB;AACtD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,gBAAgB,iBAAiB;AACjC,+BAA+B,iFAAuB;AACtD;AACA,SAAS;AACT,YAAY,gEAAe;AAC3B,qBAAqB;AACrB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,+BAA+B,+DAAW;AAC1C,6BAA6B,+DAAW;AACxC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,gBAAgB,iBAAiB;AACjC,4BAA4B,gEAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,cAAc,4DAAU;AACxB;AACA,KAAK;AACL;AACA,0BAA0B,+DAAW;AACrC;AACA,qBAAqB;AACrB;AACA,gBAAgB,gEAAe;AAC/B;AACA;AACA,sCAAsC,4DAAU;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+EAAmB;AACpD;AACA;AACA,yBAAyB;AACzB;AACA,KAAK;AACL;AACA;AACA,wBAAwB,qEAAiB;AACzC;AACA;AACA,sCAAsC,4DAAU;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4DAAU;AACxC;AACA;AACA;AACA,wCAAwC,iFAAuB;AAC/D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB,iEAAe;AAC/B;AACA;AACA,iBAAiB;AACjB;AACA;AACA,kCAAkC,4DAAU;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,mCAAmC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,+DAAW;AAClD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAgB;AAC5B,YAAY,gEAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,gBAAgB,sDAAsD;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iFAAuB;AAC1D;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,oBAAoB,oEAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAgB;AAC5B,YAAY,gEAAe;AAC3B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,gBAAgB,qDAAqD;AACrE;AACA;AACA;AACA;AACA;AACA,uBAAuB,2EAAoB;AAC3C;AACA,mCAAmC,iFAAuB;AAC1D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB,oEAAc;AAClC;AACA;AACA;AACA;AACA;AACA,kCAAkC,+EAAmB;AACrD;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAgB;AAC5B,YAAY,gEAAe;AAC3B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA,YAAY,mEAAgB;AAC5B;AACA,oBAAoB,gEAAe;AACnC;AACA,aAAa;AACb;AACA;AACA,YAAY,gEAAe;AAC3B;AACA;AACA,kBAAkB,2EAAoB;AACtC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gEAAe;AAC3B,YAAY,mEAAgB;AAC5B;AACA;AACA;AACA;AACA,6BAA6B,gEAAe;AAC5C;AACA;AACA;AACA;AACA,oCAAoC,sFAAuB,eAAe,6EAAoB;AAC9F;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,gBAAgB,8CAA8C;AAC9D;AACA,mDAAmD,2BAA2B,KAAK,4DAAU,8CAA8C,EAAE,sBAAsB;AACnK,kDAAkD,2BAA2B,KAAK,4DAAU,8CAA8C,EAAE,sBAAsB;AAClK;AACA,YAAY,mEAAgB;AAC5B;AACA,oBAAoB,mEAAgB;AACpC,oBAAoB,gEAAe;AACnC;AACA;AACA,aAAa;AACb;AACA;AACA,YAAY,gEAAe;AAC3B;AACA;AACA;AACA,0CAA0C,2EAAoB;AAC9D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,YAAY,gEAAe;AAC3B,YAAY,mEAAgB;AAC5B;AACA;AACA;AACA,6BAA6B,gEAAe;AAC5C;AACA;AACA;AACA;AACA,oCAAoC,sFAAuB,eAAe,6EAAoB;AAC9F;AACA,aAAa;AACb;AACA;AACA,gBAAgB,mEAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gEAAe;AAC3B,YAAY,mEAAgB;AAC5B;AACA;AACA;AACA;AACA,6BAA6B,gEAAe;AAC5C;AACA;AACA;AACA;AACA,oCAAoC,sFAAuB,eAAe,6EAAoB;AAC9F;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA;AACA,iDAAiD,+EAAmB;AACpE;AACA,KAAK;AACL;AACA;AACA,gBAAgB,kCAAkC;AAClD;AACA;AACA;AACA,8BAA8B,+EAAmB;AACjD,4BA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","sources":["webpack://python_server/./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SwapController.js","webpack://python_server/./node_modules/@reown/appkit-controllers/dist/esm/src/utils/SwapCalculationUtil.js","webpack://python_server/./node_modules/@reown/appkit-ui/dist/esm/exports/wui-icon.js","webpack://python_server/./node_modules/@reown/appkit-ui/dist/esm/exports/wui-input-text.js","webpack://python_server/./node_modules/@reown/appkit-ui/dist/esm/exports/wui-token-button.js","webpack://python_server/./node_modules/@reown/appkit-ui/dist/esm/src/components/wui-image/index.js","webpack://python_server/./node_modules/@reown/appkit-ui/dist/esm/src/components/wui-image/styles.js","webpack://python_server/./node_modules/@reown/appkit-ui/dist/esm/src/composites/wui-token-button/index.js","webpack://python_server/./node_modules/@reown/appkit-ui/dist/esm/src/composites/wui-token-button/styles.js"],"sourcesContent":["import { proxy, subscribe as sub } from 'valtio/vanilla';\nimport { subscribeKey as subKey } from 'valtio/vanilla/utils';\nimport { NumberUtil } from '@reown/appkit-common';\nimport { ConstantsUtil as CommonConstantsUtil } from '@reown/appkit-common';\nimport { W3mFrameRpcConstants } from '@reown/appkit-wallet/utils';\nimport { BalanceUtil } from '../utils/BalanceUtil.js';\nimport { getActiveNetworkTokenAddress, getPreferredAccountType } from '../utils/ChainControllerUtil.js';\nimport { ConstantsUtil } from '../utils/ConstantsUtil.js';\nimport { CoreHelperUtil } from '../utils/CoreHelperUtil.js';\nimport { SwapApiUtil } from '../utils/SwapApiUtil.js';\nimport { SwapCalculationUtil } from '../utils/SwapCalculationUtil.js';\nimport { withErrorBoundary } from '../utils/withErrorBoundary.js';\nimport { AccountController } from './AccountController.js';\nimport { AlertController } from './AlertController.js';\nimport { BlockchainApiController } from './BlockchainApiController.js';\nimport { ChainController } from './ChainController.js';\nimport { ConnectionController } from './ConnectionController.js';\nimport { ConnectorController } from './ConnectorController.js';\nimport { EventsController } from './EventsController.js';\nimport { RouterController } from './RouterController.js';\nimport { SnackController } from './SnackController.js';\n// -- Constants ---------------------------------------- //\nexport const INITIAL_GAS_LIMIT = 150000;\nexport const TO_AMOUNT_DECIMALS = 6;\nclass TransactionError extends Error {\n    constructor(message, shortMessage) {\n        super(message);\n        this.name = 'TransactionError';\n        this.shortMessage = shortMessage;\n    }\n}\n// -- State --------------------------------------------- //\nconst initialState = {\n    // Loading states\n    initializing: false,\n    initialized: false,\n    loadingPrices: false,\n    loadingQuote: false,\n    loadingApprovalTransaction: false,\n    loadingBuildTransaction: false,\n    loadingTransaction: false,\n    // Error states\n    fetchError: false,\n    // Approval & Swap transaction states\n    approvalTransaction: undefined,\n    swapTransaction: undefined,\n    transactionError: undefined,\n    // Input values\n    sourceToken: undefined,\n    sourceTokenAmount: '',\n    sourceTokenPriceInUSD: 0,\n    toToken: undefined,\n    toTokenAmount: '',\n    toTokenPriceInUSD: 0,\n    networkPrice: '0',\n    networkBalanceInUSD: '0',\n    networkTokenSymbol: '',\n    inputError: undefined,\n    // Request values\n    slippage: ConstantsUtil.CONVERT_SLIPPAGE_TOLERANCE,\n    // Tokens\n    tokens: undefined,\n    popularTokens: undefined,\n    suggestedTokens: undefined,\n    foundTokens: undefined,\n    myTokensWithBalance: undefined,\n    tokensPriceMap: {},\n    // Calculations\n    gasFee: '0',\n    gasPriceInUSD: 0,\n    priceImpact: undefined,\n    maxSlippage: undefined,\n    providerFee: undefined\n};\nconst state = proxy(initialState);\n// -- Controller ---------------------------------------- //\nconst controller = {\n    state,\n    subscribe(callback) {\n        return sub(state, () => callback(state));\n    },\n    subscribeKey(key, callback) {\n        return subKey(state, key, callback);\n    },\n    getParams() {\n        const caipAddress = ChainController.state.activeCaipAddress;\n        const namespace = ChainController.state.activeChain;\n        const address = CoreHelperUtil.getPlainAddress(caipAddress);\n        const networkAddress = getActiveNetworkTokenAddress();\n        const connectorId = ConnectorController.getConnectorId(namespace);\n        if (!address) {\n            throw new Error('No address found to swap the tokens from.');\n        }\n        const invalidToToken = !state.toToken?.address || !state.toToken?.decimals;\n        const invalidSourceToken = !state.sourceToken?.address ||\n            !state.sourceToken?.decimals ||\n            !NumberUtil.bigNumber(state.sourceTokenAmount).gt(0);\n        const invalidSourceTokenAmount = !state.sourceTokenAmount;\n        return {\n            networkAddress,\n            fromAddress: address,\n            fromCaipAddress: caipAddress,\n            sourceTokenAddress: state.sourceToken?.address,\n            toTokenAddress: state.toToken?.address,\n            toTokenAmount: state.toTokenAmount,\n            toTokenDecimals: state.toToken?.decimals,\n            sourceTokenAmount: state.sourceTokenAmount,\n            sourceTokenDecimals: state.sourceToken?.decimals,\n            invalidToToken,\n            invalidSourceToken,\n            invalidSourceTokenAmount,\n            availableToSwap: caipAddress && !invalidToToken && !invalidSourceToken && !invalidSourceTokenAmount,\n            isAuthConnector: connectorId === CommonConstantsUtil.CONNECTOR_ID.AUTH\n        };\n    },\n    setSourceToken(sourceToken) {\n        if (!sourceToken) {\n            state.sourceToken = sourceToken;\n            state.sourceTokenAmount = '';\n            state.sourceTokenPriceInUSD = 0;\n            return;\n        }\n        state.sourceToken = sourceToken;\n        SwapController.setTokenPrice(sourceToken.address, 'sourceToken');\n    },\n    setSourceTokenAmount(amount) {\n        state.sourceTokenAmount = amount;\n    },\n    setToToken(toToken) {\n        if (!toToken) {\n            state.toToken = toToken;\n            state.toTokenAmount = '';\n            state.toTokenPriceInUSD = 0;\n            return;\n        }\n        state.toToken = toToken;\n        SwapController.setTokenPrice(toToken.address, 'toToken');\n    },\n    setToTokenAmount(amount) {\n        state.toTokenAmount = amount\n            ? NumberUtil.formatNumberToLocalString(amount, TO_AMOUNT_DECIMALS)\n            : '';\n    },\n    async setTokenPrice(address, target) {\n        let price = state.tokensPriceMap[address] || 0;\n        if (!price) {\n            state.loadingPrices = true;\n            price = await SwapController.getAddressPrice(address);\n        }\n        if (target === 'sourceToken') {\n            state.sourceTokenPriceInUSD = price;\n        }\n        else if (target === 'toToken') {\n            state.toTokenPriceInUSD = price;\n        }\n        if (state.loadingPrices) {\n            state.loadingPrices = false;\n        }\n        if (SwapController.getParams().availableToSwap) {\n            SwapController.swapTokens();\n        }\n    },\n    switchTokens() {\n        if (state.initializing || !state.initialized) {\n            return;\n        }\n        const newSourceToken = state.toToken ? { ...state.toToken } : undefined;\n        const newToToken = state.sourceToken ? { ...state.sourceToken } : undefined;\n        const newSourceTokenAmount = newSourceToken && state.toTokenAmount === '' ? '1' : state.toTokenAmount;\n        SwapController.setSourceToken(newSourceToken);\n        SwapController.setToToken(newToToken);\n        SwapController.setSourceTokenAmount(newSourceTokenAmount);\n        SwapController.setToTokenAmount('');\n        SwapController.swapTokens();\n    },\n    resetState() {\n        state.myTokensWithBalance = initialState.myTokensWithBalance;\n        state.tokensPriceMap = initialState.tokensPriceMap;\n        state.initialized = initialState.initialized;\n        state.sourceToken = initialState.sourceToken;\n        state.sourceTokenAmount = initialState.sourceTokenAmount;\n        state.sourceTokenPriceInUSD = initialState.sourceTokenPriceInUSD;\n        state.toToken = initialState.toToken;\n        state.toTokenAmount = initialState.toTokenAmount;\n        state.toTokenPriceInUSD = initialState.toTokenPriceInUSD;\n        state.networkPrice = initialState.networkPrice;\n        state.networkTokenSymbol = initialState.networkTokenSymbol;\n        state.networkBalanceInUSD = initialState.networkBalanceInUSD;\n        state.inputError = initialState.inputError;\n        state.myTokensWithBalance = initialState.myTokensWithBalance;\n    },\n    resetValues() {\n        const { networkAddress } = SwapController.getParams();\n        const networkToken = state.tokens?.find(token => token.address === networkAddress);\n        SwapController.setSourceToken(networkToken);\n        SwapController.setToToken(undefined);\n    },\n    getApprovalLoadingState() {\n        return state.loadingApprovalTransaction;\n    },\n    clearError() {\n        state.transactionError = undefined;\n    },\n    async initializeState() {\n        if (state.initializing) {\n            return;\n        }\n        state.initializing = true;\n        if (!state.initialized) {\n            try {\n                await SwapController.fetchTokens();\n                state.initialized = true;\n            }\n            catch (error) {\n                state.initialized = false;\n                SnackController.showError('Failed to initialize swap');\n                RouterController.goBack();\n            }\n        }\n        state.initializing = false;\n    },\n    async fetchTokens() {\n        const { networkAddress } = SwapController.getParams();\n        await SwapController.getTokenList();\n        await SwapController.getNetworkTokenPrice();\n        await SwapController.getMyTokensWithBalance();\n        const networkToken = state.tokens?.find(token => token.address === networkAddress);\n        if (networkToken) {\n            state.networkTokenSymbol = networkToken.symbol;\n            SwapController.setSourceToken(networkToken);\n            SwapController.setSourceTokenAmount('1');\n        }\n    },\n    async getTokenList() {\n        const tokens = await SwapApiUtil.getTokenList();\n        state.tokens = tokens;\n        state.popularTokens = tokens.sort((aTokenInfo, bTokenInfo) => {\n            if (aTokenInfo.symbol < bTokenInfo.symbol) {\n                return -1;\n            }\n            if (aTokenInfo.symbol > bTokenInfo.symbol) {\n                return 1;\n            }\n            return 0;\n        });\n        state.suggestedTokens = tokens.filter(token => {\n            if (ConstantsUtil.SWAP_SUGGESTED_TOKENS.includes(token.symbol)) {\n                return true;\n            }\n            return false;\n        }, {});\n    },\n    async getAddressPrice(address) {\n        const existPrice = state.tokensPriceMap[address];\n        if (existPrice) {\n            return existPrice;\n        }\n        const response = await BlockchainApiController.fetchTokenPrice({\n            addresses: [address]\n        });\n        const fungibles = response?.fungibles || [];\n        const allTokens = [...(state.tokens || []), ...(state.myTokensWithBalance || [])];\n        const symbol = allTokens?.find(token => token.address === address)?.symbol;\n        const price = fungibles.find(p => p.symbol.toLowerCase() === symbol?.toLowerCase())?.price || 0;\n        const priceAsFloat = parseFloat(price.toString());\n        state.tokensPriceMap[address] = priceAsFloat;\n        return priceAsFloat;\n    },\n    async getNetworkTokenPrice() {\n        const { networkAddress } = SwapController.getParams();\n        const response = await BlockchainApiController.fetchTokenPrice({\n            addresses: [networkAddress]\n        }).catch(() => {\n            SnackController.showError('Failed to fetch network token price');\n            return { fungibles: [] };\n        });\n        const token = response.fungibles?.[0];\n        const price = token?.price.toString() || '0';\n        state.tokensPriceMap[networkAddress] = parseFloat(price);\n        state.networkTokenSymbol = token?.symbol || '';\n        state.networkPrice = price;\n    },\n    async getMyTokensWithBalance(forceUpdate) {\n        const balances = await BalanceUtil.getMyTokensWithBalance(forceUpdate);\n        const swapBalances = SwapApiUtil.mapBalancesToSwapTokens(balances);\n        if (!swapBalances) {\n            return;\n        }\n        await SwapController.getInitialGasPrice();\n        SwapController.setBalances(swapBalances);\n    },\n    setBalances(balances) {\n        const { networkAddress } = SwapController.getParams();\n        const caipNetwork = ChainController.state.activeCaipNetwork;\n        if (!caipNetwork) {\n            return;\n        }\n        const networkToken = balances.find(token => token.address === networkAddress);\n        balances.forEach(token => {\n            state.tokensPriceMap[token.address] = token.price || 0;\n        });\n        state.myTokensWithBalance = balances.filter(token => token.address.startsWith(caipNetwork.caipNetworkId));\n        state.networkBalanceInUSD = networkToken\n            ? NumberUtil.multiply(networkToken.quantity.numeric, networkToken.price).toString()\n            : '0';\n    },\n    async getInitialGasPrice() {\n        const res = await SwapApiUtil.fetchGasPrice();\n        if (!res) {\n            return { gasPrice: null, gasPriceInUSD: null };\n        }\n        switch (ChainController.state?.activeCaipNetwork?.chainNamespace) {\n            case 'solana':\n                state.gasFee = res.standard ?? '0';\n                state.gasPriceInUSD = NumberUtil.multiply(res.standard, state.networkPrice)\n                    .div(1e9)\n                    .toNumber();\n                return {\n                    gasPrice: BigInt(state.gasFee),\n                    gasPriceInUSD: Number(state.gasPriceInUSD)\n                };\n            case 'eip155':\n            default:\n                // eslint-disable-next-line no-case-declarations\n                const value = res.standard ?? '0';\n                // eslint-disable-next-line no-case-declarations\n                const gasFee = BigInt(value);\n                // eslint-disable-next-line no-case-declarations\n                const gasLimit = BigInt(INITIAL_GAS_LIMIT);\n                // eslint-disable-next-line no-case-declarations\n                const gasPrice = SwapCalculationUtil.getGasPriceInUSD(state.networkPrice, gasLimit, gasFee);\n                state.gasFee = value;\n                state.gasPriceInUSD = gasPrice;\n                return { gasPrice: gasFee, gasPriceInUSD: gasPrice };\n        }\n    },\n    // -- Swap -------------------------------------- //\n    async swapTokens() {\n        const address = AccountController.state.address;\n        const sourceToken = state.sourceToken;\n        const toToken = state.toToken;\n        const haveSourceTokenAmount = NumberUtil.bigNumber(state.sourceTokenAmount).gt(0);\n        if (!haveSourceTokenAmount) {\n            SwapController.setToTokenAmount('');\n        }\n        if (!toToken || !sourceToken || state.loadingPrices || !haveSourceTokenAmount) {\n            return;\n        }\n        state.loadingQuote = true;\n        const amountDecimal = NumberUtil.bigNumber(state.sourceTokenAmount)\n            .times(10 ** sourceToken.decimals)\n            .round(0);\n        try {\n            const quoteResponse = await BlockchainApiController.fetchSwapQuote({\n                userAddress: address,\n                from: sourceToken.address,\n                to: toToken.address,\n                gasPrice: state.gasFee,\n                amount: amountDecimal.toString()\n            });\n            state.loadingQuote = false;\n            const quoteToAmount = quoteResponse?.quotes?.[0]?.toAmount;\n            if (!quoteToAmount) {\n                AlertController.open({\n                    shortMessage: 'Incorrect amount',\n                    longMessage: 'Please enter a valid amount'\n                }, 'error');\n                return;\n            }\n            const toTokenAmount = NumberUtil.bigNumber(quoteToAmount)\n                .div(10 ** toToken.decimals)\n                .toString();\n            SwapController.setToTokenAmount(toTokenAmount);\n            const isInsufficientToken = SwapController.hasInsufficientToken(state.sourceTokenAmount, sourceToken.address);\n            if (isInsufficientToken) {\n                state.inputError = 'Insufficient balance';\n            }\n            else {\n                state.inputError = undefined;\n                SwapController.setTransactionDetails();\n            }\n        }\n        catch (error) {\n            state.loadingQuote = false;\n            state.inputError = 'Insufficient balance';\n        }\n    },\n    // -- Create Transactions -------------------------------------- //\n    async getTransaction() {\n        const { fromCaipAddress, availableToSwap } = SwapController.getParams();\n        const sourceToken = state.sourceToken;\n        const toToken = state.toToken;\n        if (!fromCaipAddress || !availableToSwap || !sourceToken || !toToken || state.loadingQuote) {\n            return undefined;\n        }\n        try {\n            state.loadingBuildTransaction = true;\n            const hasAllowance = await SwapApiUtil.fetchSwapAllowance({\n                userAddress: fromCaipAddress,\n                tokenAddress: sourceToken.address,\n                sourceTokenAmount: state.sourceTokenAmount,\n                sourceTokenDecimals: sourceToken.decimals\n            });\n            let transaction = undefined;\n            if (hasAllowance) {\n                transaction = await SwapController.createSwapTransaction();\n            }\n            else {\n                transaction = await SwapController.createAllowanceTransaction();\n            }\n            state.loadingBuildTransaction = false;\n            state.fetchError = false;\n            return transaction;\n        }\n        catch (error) {\n            RouterController.goBack();\n            SnackController.showError('Failed to check allowance');\n            state.loadingBuildTransaction = false;\n            state.approvalTransaction = undefined;\n            state.swapTransaction = undefined;\n            state.fetchError = true;\n            return undefined;\n        }\n    },\n    async createAllowanceTransaction() {\n        const { fromCaipAddress, sourceTokenAddress, toTokenAddress } = SwapController.getParams();\n        if (!fromCaipAddress || !toTokenAddress) {\n            return undefined;\n        }\n        if (!sourceTokenAddress) {\n            throw new Error('createAllowanceTransaction - No source token address found.');\n        }\n        try {\n            const response = await BlockchainApiController.generateApproveCalldata({\n                from: sourceTokenAddress,\n                to: toTokenAddress,\n                userAddress: fromCaipAddress\n            });\n            const transaction = {\n                data: response.tx.data,\n                to: CoreHelperUtil.getPlainAddress(response.tx.from),\n                gasPrice: BigInt(response.tx.eip155.gasPrice),\n                value: BigInt(response.tx.value),\n                toAmount: state.toTokenAmount\n            };\n            state.swapTransaction = undefined;\n            state.approvalTransaction = {\n                data: transaction.data,\n                to: transaction.to,\n                gasPrice: transaction.gasPrice,\n                value: transaction.value,\n                toAmount: transaction.toAmount\n            };\n            return {\n                data: transaction.data,\n                to: transaction.to,\n                gasPrice: transaction.gasPrice,\n                value: transaction.value,\n                toAmount: transaction.toAmount\n            };\n        }\n        catch (error) {\n            RouterController.goBack();\n            SnackController.showError('Failed to create approval transaction');\n            state.approvalTransaction = undefined;\n            state.swapTransaction = undefined;\n            state.fetchError = true;\n            return undefined;\n        }\n    },\n    async createSwapTransaction() {\n        const { networkAddress, fromCaipAddress, sourceTokenAmount } = SwapController.getParams();\n        const sourceToken = state.sourceToken;\n        const toToken = state.toToken;\n        if (!fromCaipAddress || !sourceTokenAmount || !sourceToken || !toToken) {\n            return undefined;\n        }\n        const amount = ConnectionController.parseUnits(sourceTokenAmount, sourceToken.decimals)?.toString();\n        try {\n            const response = await BlockchainApiController.generateSwapCalldata({\n                userAddress: fromCaipAddress,\n                from: sourceToken.address,\n                to: toToken.address,\n                amount: amount,\n                disableEstimate: true\n            });\n            const isSourceTokenIsNetworkToken = sourceToken.address === networkAddress;\n            const gas = BigInt(response.tx.eip155.gas);\n            const gasPrice = BigInt(response.tx.eip155.gasPrice);\n            const transaction = {\n                data: response.tx.data,\n                to: CoreHelperUtil.getPlainAddress(response.tx.to),\n                gas,\n                gasPrice,\n                value: isSourceTokenIsNetworkToken ? BigInt(amount ?? '0') : BigInt('0'),\n                toAmount: state.toTokenAmount\n            };\n            state.gasPriceInUSD = SwapCalculationUtil.getGasPriceInUSD(state.networkPrice, gas, gasPrice);\n            state.approvalTransaction = undefined;\n            state.swapTransaction = transaction;\n            return transaction;\n        }\n        catch (error) {\n            RouterController.goBack();\n            SnackController.showError('Failed to create transaction');\n            state.approvalTransaction = undefined;\n            state.swapTransaction = undefined;\n            state.fetchError = true;\n            return undefined;\n        }\n    },\n    // -- Send Transactions --------------------------------- //\n    async sendTransactionForApproval(data) {\n        const { fromAddress, isAuthConnector } = SwapController.getParams();\n        state.loadingApprovalTransaction = true;\n        const approveLimitMessage = `Approve limit increase in your wallet`;\n        if (isAuthConnector) {\n            RouterController.pushTransactionStack({\n                onSuccess() {\n                    SnackController.showLoading(approveLimitMessage);\n                }\n            });\n        }\n        else {\n            SnackController.showLoading(approveLimitMessage);\n        }\n        try {\n            await ConnectionController.sendTransaction({\n                address: fromAddress,\n                to: data.to,\n                data: data.data,\n                value: data.value,\n                chainNamespace: 'eip155'\n            });\n            await SwapController.swapTokens();\n            await SwapController.getTransaction();\n            state.approvalTransaction = undefined;\n            state.loadingApprovalTransaction = false;\n        }\n        catch (err) {\n            const error = err;\n            state.transactionError = error?.shortMessage;\n            state.loadingApprovalTransaction = false;\n            SnackController.showError(error?.shortMessage || 'Transaction error');\n            EventsController.sendEvent({\n                type: 'track',\n                event: 'SWAP_APPROVAL_ERROR',\n                properties: {\n                    message: error?.shortMessage || error?.message || 'Unknown',\n                    network: ChainController.state.activeCaipNetwork?.caipNetworkId || '',\n                    swapFromToken: SwapController.state.sourceToken?.symbol || '',\n                    swapToToken: SwapController.state.toToken?.symbol || '',\n                    swapFromAmount: SwapController.state.sourceTokenAmount || '',\n                    swapToAmount: SwapController.state.toTokenAmount || '',\n                    isSmartAccount: getPreferredAccountType('eip155') === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT\n                }\n            });\n        }\n    },\n    async sendTransactionForSwap(data) {\n        if (!data) {\n            return undefined;\n        }\n        const { fromAddress, toTokenAmount, isAuthConnector } = SwapController.getParams();\n        state.loadingTransaction = true;\n        const snackbarPendingMessage = `Swapping ${state.sourceToken?.symbol} to ${NumberUtil.formatNumberToLocalString(toTokenAmount, 3)} ${state.toToken?.symbol}`;\n        const snackbarSuccessMessage = `Swapped ${state.sourceToken?.symbol} to ${NumberUtil.formatNumberToLocalString(toTokenAmount, 3)} ${state.toToken?.symbol}`;\n        if (isAuthConnector) {\n            RouterController.pushTransactionStack({\n                onSuccess() {\n                    RouterController.replace('Account');\n                    SnackController.showLoading(snackbarPendingMessage);\n                    controller.resetState();\n                }\n            });\n        }\n        else {\n            SnackController.showLoading('Confirm transaction in your wallet');\n        }\n        try {\n            const forceUpdateAddresses = [state.sourceToken?.address, state.toToken?.address].join(',');\n            const transactionHash = await ConnectionController.sendTransaction({\n                address: fromAddress,\n                to: data.to,\n                data: data.data,\n                value: data.value,\n                chainNamespace: 'eip155'\n            });\n            state.loadingTransaction = false;\n            SnackController.showSuccess(snackbarSuccessMessage);\n            EventsController.sendEvent({\n                type: 'track',\n                event: 'SWAP_SUCCESS',\n                properties: {\n                    network: ChainController.state.activeCaipNetwork?.caipNetworkId || '',\n                    swapFromToken: SwapController.state.sourceToken?.symbol || '',\n                    swapToToken: SwapController.state.toToken?.symbol || '',\n                    swapFromAmount: SwapController.state.sourceTokenAmount || '',\n                    swapToAmount: SwapController.state.toTokenAmount || '',\n                    isSmartAccount: getPreferredAccountType('eip155') === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT\n                }\n            });\n            controller.resetState();\n            if (!isAuthConnector) {\n                RouterController.replace('Account');\n            }\n            controller.getMyTokensWithBalance(forceUpdateAddresses);\n            return transactionHash;\n        }\n        catch (err) {\n            const error = err;\n            state.transactionError = error?.shortMessage;\n            state.loadingTransaction = false;\n            SnackController.showError(error?.shortMessage || 'Transaction error');\n            EventsController.sendEvent({\n                type: 'track',\n                event: 'SWAP_ERROR',\n                properties: {\n                    message: error?.shortMessage || error?.message || 'Unknown',\n                    network: ChainController.state.activeCaipNetwork?.caipNetworkId || '',\n                    swapFromToken: SwapController.state.sourceToken?.symbol || '',\n                    swapToToken: SwapController.state.toToken?.symbol || '',\n                    swapFromAmount: SwapController.state.sourceTokenAmount || '',\n                    swapToAmount: SwapController.state.toTokenAmount || '',\n                    isSmartAccount: getPreferredAccountType('eip155') === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT\n                }\n            });\n            return undefined;\n        }\n    },\n    // -- Checks -------------------------------------------- //\n    hasInsufficientToken(sourceTokenAmount, sourceTokenAddress) {\n        const isInsufficientSourceTokenForSwap = SwapCalculationUtil.isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, state.myTokensWithBalance);\n        return isInsufficientSourceTokenForSwap;\n    },\n    // -- Calculations -------------------------------------- //\n    setTransactionDetails() {\n        const { toTokenAddress, toTokenDecimals } = SwapController.getParams();\n        if (!toTokenAddress || !toTokenDecimals) {\n            return;\n        }\n        state.gasPriceInUSD = SwapCalculationUtil.getGasPriceInUSD(state.networkPrice, BigInt(state.gasFee), BigInt(INITIAL_GAS_LIMIT));\n        state.priceImpact = SwapCalculationUtil.getPriceImpact({\n            sourceTokenAmount: state.sourceTokenAmount,\n            sourceTokenPriceInUSD: state.sourceTokenPriceInUSD,\n            toTokenPriceInUSD: state.toTokenPriceInUSD,\n            toTokenAmount: state.toTokenAmount\n        });\n        state.maxSlippage = SwapCalculationUtil.getMaxSlippage(state.slippage, state.toTokenAmount);\n        state.providerFee = SwapCalculationUtil.getProviderFee(state.sourceTokenAmount);\n    }\n};\n// Export the controller wrapped with our error boundary\nexport const SwapController = withErrorBoundary(controller);\n//# sourceMappingURL=SwapController.js.map","// -- Types --------------------------------------------- //\nimport { NumberUtil } from '@reown/appkit-common';\n// -- Util ---------------------------------------- //\nexport const SwapCalculationUtil = {\n    getGasPriceInEther(gas, gasPrice) {\n        const totalGasCostInWei = gasPrice * gas;\n        const totalGasCostInEther = Number(totalGasCostInWei) / 1e18;\n        return totalGasCostInEther;\n    },\n    getGasPriceInUSD(networkPrice, gas, gasPrice) {\n        const totalGasCostInEther = SwapCalculationUtil.getGasPriceInEther(gas, gasPrice);\n        const networkPriceInUSD = NumberUtil.bigNumber(networkPrice);\n        const gasCostInUSD = networkPriceInUSD.times(totalGasCostInEther);\n        return gasCostInUSD.toNumber();\n    },\n    getPriceImpact({ sourceTokenAmount, sourceTokenPriceInUSD, toTokenPriceInUSD, toTokenAmount }) {\n        const inputValue = NumberUtil.bigNumber(sourceTokenAmount).times(sourceTokenPriceInUSD);\n        const outputValue = NumberUtil.bigNumber(toTokenAmount).times(toTokenPriceInUSD);\n        const priceImpact = inputValue.minus(outputValue).div(inputValue).times(100);\n        return priceImpact.toNumber();\n    },\n    getMaxSlippage(slippage, toTokenAmount) {\n        const slippageToleranceDecimal = NumberUtil.bigNumber(slippage).div(100);\n        const maxSlippageAmount = NumberUtil.multiply(toTokenAmount, slippageToleranceDecimal);\n        return maxSlippageAmount.toNumber();\n    },\n    getProviderFee(sourceTokenAmount, feePercentage = 0.0085) {\n        const providerFee = NumberUtil.bigNumber(sourceTokenAmount).times(feePercentage);\n        return providerFee.toString();\n    },\n    isInsufficientNetworkTokenForGas(networkBalanceInUSD, gasPriceInUSD) {\n        const gasPrice = gasPriceInUSD || '0';\n        if (NumberUtil.bigNumber(networkBalanceInUSD).eq(0)) {\n            return true;\n        }\n        return NumberUtil.bigNumber(NumberUtil.bigNumber(gasPrice)).gt(networkBalanceInUSD);\n    },\n    isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, balance) {\n        const sourceTokenBalance = balance?.find(token => token.address === sourceTokenAddress)\n            ?.quantity?.numeric;\n        const isInSufficientBalance = NumberUtil.bigNumber(sourceTokenBalance || '0').lt(sourceTokenAmount);\n        return isInSufficientBalance;\n    },\n    getToTokenAmount({ sourceToken, toToken, sourceTokenPrice, toTokenPrice, sourceTokenAmount }) {\n        if (sourceTokenAmount === '0') {\n            return '0';\n        }\n        if (!sourceToken || !toToken) {\n            return '0';\n        }\n        const sourceTokenDecimals = sourceToken.decimals;\n        const sourceTokenPriceInUSD = sourceTokenPrice;\n        const toTokenDecimals = toToken.decimals;\n        const toTokenPriceInUSD = toTokenPrice;\n        if (toTokenPriceInUSD <= 0) {\n            return '0';\n        }\n        // Calculate the provider fee (0.85% of the source token amount)\n        const providerFee = NumberUtil.bigNumber(sourceTokenAmount).times(0.0085);\n        // Adjust the source token amount by subtracting the provider fee\n        const adjustedSourceTokenAmount = NumberUtil.bigNumber(sourceTokenAmount).minus(providerFee);\n        // Proceed with conversion using the adjusted source token amount\n        const sourceAmountInSmallestUnit = adjustedSourceTokenAmount.times(NumberUtil.bigNumber(10).pow(sourceTokenDecimals));\n        const priceRatio = NumberUtil.bigNumber(sourceTokenPriceInUSD).div(toTokenPriceInUSD);\n        const decimalDifference = sourceTokenDecimals - toTokenDecimals;\n        const toTokenAmountInSmallestUnit = sourceAmountInSmallestUnit\n            .times(priceRatio)\n            .div(NumberUtil.bigNumber(10).pow(decimalDifference));\n        const toTokenAmount = toTokenAmountInSmallestUnit.div(NumberUtil.bigNumber(10).pow(toTokenDecimals));\n        const amount = toTokenAmount.toFixed(toTokenDecimals).toString();\n        return amount;\n    }\n};\n//# sourceMappingURL=SwapCalculationUtil.js.map","export * from '../src/components/wui-icon/index.js';\n//# sourceMappingURL=wui-icon.js.map","export * from '../src/composites/wui-input-text/index.js';\n//# sourceMappingURL=wui-input-text.js.map","export * from '../src/composites/wui-token-button/index.js';\n//# sourceMappingURL=wui-token-button.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { colorStyles, resetStyles } from '../../utils/ThemeUtil.js';\nimport { customElement } from '../../utils/WebComponentsUtil.js';\nimport styles from './styles.js';\nlet WuiImage = class WuiImage extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.src = './path/to/image.jpg';\n        this.alt = 'Image';\n        this.size = undefined;\n        this.objectFit = 'cover';\n    }\n    render() {\n        if (this.objectFit) {\n            this.dataset['objectFit'] = this.objectFit;\n        }\n        this.style.cssText = `\n      --local-width: ${this.size ? `var(--wui-icon-size-${this.size});` : '100%'};\n      --local-height: ${this.size ? `var(--wui-icon-size-${this.size});` : '100%'};\n      `;\n        return html `<img src=${this.src} alt=${this.alt} @error=${this.handleImageError} />`;\n    }\n    handleImageError() {\n        this.dispatchEvent(new CustomEvent('onLoadError', { bubbles: true, composed: true }));\n    }\n};\nWuiImage.styles = [resetStyles, colorStyles, styles];\n__decorate([\n    property()\n], WuiImage.prototype, \"src\", void 0);\n__decorate([\n    property()\n], WuiImage.prototype, \"alt\", void 0);\n__decorate([\n    property()\n], WuiImage.prototype, \"size\", void 0);\n__decorate([\n    property()\n], WuiImage.prototype, \"objectFit\", void 0);\nWuiImage = __decorate([\n    customElement('wui-image')\n], WuiImage);\nexport { WuiImage };\n//# sourceMappingURL=index.js.map","import { css } from 'lit';\nexport default css `\n  :host {\n    display: block;\n    width: var(--local-width);\n    height: var(--local-height);\n  }\n\n  :host([data-object-fit='cover']) img {\n    object-fit: cover;\n    object-position: center center;\n  }\n\n  :host([data-object-fit='contain']) img {\n    object-fit: contain;\n    object-position: center center;\n  }\n\n  img {\n    display: block;\n    width: 100%;\n    height: 100%;\n    border-radius: inherit;\n  }\n`;\n//# sourceMappingURL=styles.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport '../../components/wui-image/index.js';\nimport '../../components/wui-text/index.js';\nimport { elementStyles, resetStyles } from '../../utils/ThemeUtil.js';\nimport { customElement } from '../../utils/WebComponentsUtil.js';\nimport '../wui-icon-box/index.js';\nimport styles from './styles.js';\nlet WuiTokenButton = class WuiTokenButton extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.text = '';\n    }\n    render() {\n        return html `\n      <button>\n        ${this.tokenTemplate()}\n        <wui-text variant=\"paragraph-600\" color=\"fg-100\">${this.text}</wui-text>\n      </button>\n    `;\n    }\n    tokenTemplate() {\n        if (this.imageSrc) {\n            return html `<wui-image src=${this.imageSrc}></wui-image>`;\n        }\n        return html `\n      <wui-icon-box\n        size=\"sm\"\n        iconColor=\"fg-200\"\n        backgroundColor=\"fg-300\"\n        icon=\"networkPlaceholder\"\n      ></wui-icon-box>\n    `;\n    }\n};\nWuiTokenButton.styles = [resetStyles, elementStyles, styles];\n__decorate([\n    property()\n], WuiTokenButton.prototype, \"imageSrc\", void 0);\n__decorate([\n    property()\n], WuiTokenButton.prototype, \"text\", void 0);\nWuiTokenButton = __decorate([\n    customElement('wui-token-button')\n], WuiTokenButton);\nexport { WuiTokenButton };\n//# sourceMappingURL=index.js.map","import { css } from 'lit';\nexport default css `\n  :host {\n    display: block;\n  }\n\n  :host > button {\n    gap: var(--wui-spacing-xxs);\n    padding: var(--wui-spacing-xs);\n    padding-right: var(--wui-spacing-1xs);\n    height: 40px;\n    border-radius: var(--wui-border-radius-l);\n    background: var(--wui-color-gray-glass-002);\n    border-width: 0px;\n    box-shadow: inset 0 0 0 1px var(--wui-color-gray-glass-002);\n  }\n\n  :host > button wui-image {\n    width: 24px;\n    height: 24px;\n    border-radius: var(--wui-border-radius-s);\n    box-shadow: inset 0 0 0 1px var(--wui-color-gray-glass-010);\n  }\n`;\n//# sourceMappingURL=styles.js.map"],"names":[],"sourceRoot":""}